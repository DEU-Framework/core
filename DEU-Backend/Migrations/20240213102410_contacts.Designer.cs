// <auto-generated />
using System;
using DEU_Backend;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DEU_Backend.Migrations
{
    [DbContext(typeof(DeuDbContext))]
    [Migration("20240213102410_contacts")]
    partial class contacts
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("ApplicationUserDepartmentSettingUserDepartmentRole", b =>
                {
                    b.Property<int>("RolesUserDepartmentRoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsersDepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UsersUserId")
                        .HasColumnType("TEXT");

                    b.HasKey("RolesUserDepartmentRoleId", "UsersDepartmentId", "UsersUserId");

                    b.HasIndex("UsersDepartmentId", "UsersUserId");

                    b.ToTable("ApplicationUserDepartmentSettingUserDepartmentRole");
                });

            modelBuilder.Entity("ApplicationUserDepartmentSettingUserDepartmentSkill", b =>
                {
                    b.Property<int>("SkillsUserDepartmentSkillId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsersDepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UsersUserId")
                        .HasColumnType("TEXT");

                    b.HasKey("SkillsUserDepartmentSkillId", "UsersDepartmentId", "UsersUserId");

                    b.HasIndex("UsersDepartmentId", "UsersUserId");

                    b.ToTable("ApplicationUserDepartmentSettingUserDepartmentSkill");
                });

            modelBuilder.Entity("CallOutOrderVehicle", b =>
                {
                    b.Property<int>("VehiclesVehicleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CallOutOrdersOperationTypeId")
                        .HasColumnType("TEXT");

                    b.Property<int>("CallOutOrdersDepartmentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("VehiclesVehicleId", "CallOutOrdersOperationTypeId", "CallOutOrdersDepartmentId");

                    b.HasIndex("CallOutOrdersOperationTypeId", "CallOutOrdersDepartmentId");

                    b.ToTable("CallOutOrderVehicle");
                });

            modelBuilder.Entity("DEU_Lib.Model.Alarmplan", b =>
                {
                    b.Property<Guid>("AlarmplanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OperationTypeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ZoneId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AlarmplanId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("OperationTypeId");

                    b.ToTable("Alarmplan");
                });

            modelBuilder.Entity("DEU_Lib.Model.AlarmplanEntry", b =>
                {
                    b.Property<Guid>("AlarmplanEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AlarmplanId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VehicleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AlarmplanEntryId");

                    b.HasIndex("AlarmplanId");

                    b.ToTable("AlarmplanEntry");
                });

            modelBuilder.Entity("DEU_Lib.Model.CallOutOrder", b =>
                {
                    b.Property<string>("OperationTypeId")
                        .HasColumnType("TEXT");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("OperationTypeId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("CallOutOrder");
                });

            modelBuilder.Entity("DEU_Lib.Model.Checklist", b =>
                {
                    b.Property<Guid>("ChecklistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OperationTypeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ChecklistId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("OperationTypeId");

                    b.ToTable("Checklists");
                });

            modelBuilder.Entity("DEU_Lib.Model.ChecklistTask", b =>
                {
                    b.Property<Guid>("ChecklistTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ChecklistId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompletedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ChecklistTaskId");

                    b.HasIndex("ChecklistId");

                    b.ToTable("ChecklistTasks");
                });

            modelBuilder.Entity("DEU_Lib.Model.Contact", b =>
                {
                    b.Property<Guid>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Infos")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSpecialDepartment")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SirenCode")
                        .HasColumnType("TEXT");

                    b.HasKey("ContactId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("DEU_Lib.Model.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .HasColumnType("TEXT");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("DEU_Lib.Model.File", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("OperationActionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PoiId")
                        .HasColumnType("TEXT");

                    b.Property<long>("Size")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("FileId");

                    b.HasIndex("OperationActionId");

                    b.HasIndex("PoiId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("DEU_Lib.Model.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DEU_Lib.Model.Identity.ApplicationUserDepartmentSetting", b =>
                {
                    b.Property<int>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVehicle")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DepartmentId", "UserId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("ApplicationUserDepartmentSettings");
                });

            modelBuilder.Entity("DEU_Lib.Model.Identity.UserDepartmentRole", b =>
                {
                    b.Property<int>("UserDepartmentRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoleDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserDepartmentRoleId");

                    b.ToTable("UserDepartmentRoles");
                });

            modelBuilder.Entity("DEU_Lib.Model.Identity.UserDepartmentSkill", b =>
                {
                    b.Property<int>("UserDepartmentSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SkillDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserDepartmentSkillId");

                    b.ToTable("UserDepartmentSkills");
                });

            modelBuilder.Entity("DEU_Lib.Model.Operation", b =>
                {
                    b.Property<string>("OperationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CallerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CallerPhone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Exercise")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("Municipal")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OperationSubTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("OperationTypeId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Public")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Zone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("OperationId");

                    b.HasIndex("OperationSubTypeId");

                    b.HasIndex("OperationTypeId");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("DEU_Lib.Model.OperationAction", b =>
                {
                    b.Property<Guid>("OperationActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OperationId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("OperationActionId");

                    b.HasIndex("OperationId");

                    b.ToTable("OperationActions");
                });

            modelBuilder.Entity("DEU_Lib.Model.OperationChecklist", b =>
                {
                    b.Property<Guid>("ChecklistId")
                        .HasColumnType("TEXT");

                    b.Property<string>("OperationId")
                        .HasColumnType("TEXT");

                    b.HasKey("ChecklistId", "OperationId");

                    b.HasIndex("OperationId");

                    b.ToTable("OperationChecklists");
                });

            modelBuilder.Entity("DEU_Lib.Model.OperationResponse", b =>
                {
                    b.Property<int>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OperationId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AcceptedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AlertTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ArriveTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DispatchTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EnrouteTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FreeTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("DepartmentId", "OperationId");

                    b.HasIndex("OperationId");

                    b.ToTable("OperationResponses");
                });

            modelBuilder.Entity("DEU_Lib.Model.OperationSubType", b =>
                {
                    b.Property<string>("OperationSubTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("OperationSubTypeId");

                    b.ToTable("OperationSubTypes");
                });

            modelBuilder.Entity("DEU_Lib.Model.OperationType", b =>
                {
                    b.Property<string>("OperationTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("OperationTypeId");

                    b.ToTable("OperationTypes");
                });

            modelBuilder.Entity("DEU_Lib.Model.OperationTypeHistory", b =>
                {
                    b.Property<Guid>("OperationTypeHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OperationId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SubTypeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("OperationTypeHistoryId");

                    b.HasIndex("OperationId");

                    b.HasIndex("SubTypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("OperationTypeHistory");
                });

            modelBuilder.Entity("DEU_Lib.Model.Poi", b =>
                {
                    b.Property<Guid>("PoiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PoiId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Pois");
                });

            modelBuilder.Entity("DEU_Lib.Model.UserOperationResponse", b =>
                {
                    b.Property<Guid>("UserOperationResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AcceptedTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OperationId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("OperationResponseDepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OperationResponseOperationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserOperationResponseId");

                    b.HasIndex("OperationId");

                    b.HasIndex("UserId");

                    b.HasIndex("OperationResponseDepartmentId", "OperationResponseOperationId");

                    b.ToTable("UserOperationResponse");
                });

            modelBuilder.Entity("DEU_Lib.Model.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CallSign")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CrewCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortName")
                        .HasColumnType("TEXT");

                    b.HasKey("VehicleId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("DEU_Lib.Model.VehicleStatus", b =>
                {
                    b.Property<Guid>("VehicleStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double?>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double?>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusDescription")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("VehicleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("VehicleStatusId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleStatuses");
                });

            modelBuilder.Entity("DEU_Lib.Model.WaKaWaterSource", b =>
                {
                    b.Property<Guid>("WaKaWaterSourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Connections")
                        .HasColumnType("TEXT");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("Flowrate")
                        .HasColumnType("INTEGER");

                    b.Property<double>("IconAnchorX")
                        .HasColumnType("REAL");

                    b.Property<double>("IconAnchorY")
                        .HasColumnType("REAL");

                    b.Property<double>("IconHeight")
                        .HasColumnType("REAL");

                    b.Property<string>("IconUrl")
                        .HasColumnType("TEXT");

                    b.Property<double>("IconWidth")
                        .HasColumnType("REAL");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceWaKaWaterSourceId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("WaKaWaterSourceId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("WaKaWaterSources");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OperationResponseVehicle", b =>
                {
                    b.Property<int>("VehiclesVehicleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OperationResponsesDepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OperationResponsesOperationId")
                        .HasColumnType("TEXT");

                    b.HasKey("VehiclesVehicleId", "OperationResponsesDepartmentId", "OperationResponsesOperationId");

                    b.HasIndex("OperationResponsesDepartmentId", "OperationResponsesOperationId");

                    b.ToTable("OperationResponseVehicles", (string)null);
                });

            modelBuilder.Entity("ApplicationUserDepartmentSettingUserDepartmentRole", b =>
                {
                    b.HasOne("DEU_Lib.Model.Identity.UserDepartmentRole", null)
                        .WithMany()
                        .HasForeignKey("RolesUserDepartmentRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DEU_Lib.Model.Identity.ApplicationUserDepartmentSetting", null)
                        .WithMany()
                        .HasForeignKey("UsersDepartmentId", "UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationUserDepartmentSettingUserDepartmentSkill", b =>
                {
                    b.HasOne("DEU_Lib.Model.Identity.UserDepartmentSkill", null)
                        .WithMany()
                        .HasForeignKey("SkillsUserDepartmentSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DEU_Lib.Model.Identity.ApplicationUserDepartmentSetting", null)
                        .WithMany()
                        .HasForeignKey("UsersDepartmentId", "UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CallOutOrderVehicle", b =>
                {
                    b.HasOne("DEU_Lib.Model.Vehicle", null)
                        .WithMany()
                        .HasForeignKey("VehiclesVehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DEU_Lib.Model.CallOutOrder", null)
                        .WithMany()
                        .HasForeignKey("CallOutOrdersOperationTypeId", "CallOutOrdersDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DEU_Lib.Model.Alarmplan", b =>
                {
                    b.HasOne("DEU_Lib.Model.Department", "Department")
                        .WithMany("Alarmplans")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DEU_Lib.Model.OperationType", "OperationType")
                        .WithMany("Alarmplans")
                        .HasForeignKey("OperationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("OperationType");
                });

            modelBuilder.Entity("DEU_Lib.Model.AlarmplanEntry", b =>
                {
                    b.HasOne("DEU_Lib.Model.Alarmplan", "Alarmplan")
                        .WithMany("AlarmplanEntries")
                        .HasForeignKey("AlarmplanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alarmplan");
                });

            modelBuilder.Entity("DEU_Lib.Model.CallOutOrder", b =>
                {
                    b.HasOne("DEU_Lib.Model.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DEU_Lib.Model.OperationType", "OperationType")
                        .WithMany()
                        .HasForeignKey("OperationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("OperationType");
                });

            modelBuilder.Entity("DEU_Lib.Model.Checklist", b =>
                {
                    b.HasOne("DEU_Lib.Model.Department", "Department")
                        .WithMany("Checklists")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DEU_Lib.Model.OperationType", "OperationType")
                        .WithMany("Checklists")
                        .HasForeignKey("OperationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("OperationType");
                });

            modelBuilder.Entity("DEU_Lib.Model.ChecklistTask", b =>
                {
                    b.HasOne("DEU_Lib.Model.Checklist", "Checklist")
                        .WithMany("Tasks")
                        .HasForeignKey("ChecklistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Checklist");
                });

            modelBuilder.Entity("DEU_Lib.Model.Contact", b =>
                {
                    b.HasOne("DEU_Lib.Model.Department", "Department")
                        .WithMany("Contacts")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("DEU_Lib.Model.File", b =>
                {
                    b.HasOne("DEU_Lib.Model.OperationAction", "OperationAction")
                        .WithMany("Files")
                        .HasForeignKey("OperationActionId");

                    b.HasOne("DEU_Lib.Model.Poi", "Poi")
                        .WithMany("Files")
                        .HasForeignKey("PoiId");

                    b.Navigation("OperationAction");

                    b.Navigation("Poi");
                });

            modelBuilder.Entity("DEU_Lib.Model.Identity.ApplicationUserDepartmentSetting", b =>
                {
                    b.HasOne("DEU_Lib.Model.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DEU_Lib.Model.Identity.ApplicationUser", "User")
                        .WithMany("DepartmentSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DEU_Lib.Model.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId");

                    b.Navigation("Department");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("DEU_Lib.Model.Operation", b =>
                {
                    b.HasOne("DEU_Lib.Model.OperationSubType", null)
                        .WithMany("Operations")
                        .HasForeignKey("OperationSubTypeId");

                    b.HasOne("DEU_Lib.Model.OperationType", null)
                        .WithMany("Operations")
                        .HasForeignKey("OperationTypeId");
                });

            modelBuilder.Entity("DEU_Lib.Model.OperationAction", b =>
                {
                    b.HasOne("DEU_Lib.Model.Operation", "Operation")
                        .WithMany("Actions")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("DEU_Lib.Model.OperationChecklist", b =>
                {
                    b.HasOne("DEU_Lib.Model.Checklist", "Checklist")
                        .WithMany()
                        .HasForeignKey("ChecklistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DEU_Lib.Model.Operation", "Operation")
                        .WithMany("OperationChecklists")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Checklist");

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("DEU_Lib.Model.OperationResponse", b =>
                {
                    b.HasOne("DEU_Lib.Model.Department", "Department")
                        .WithMany("OperationResponses")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DEU_Lib.Model.Operation", "Operation")
                        .WithMany("RespondedDepartments")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("DEU_Lib.Model.OperationTypeHistory", b =>
                {
                    b.HasOne("DEU_Lib.Model.Operation", "Operation")
                        .WithMany("OperationTypeHistories")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DEU_Lib.Model.OperationSubType", "SubType")
                        .WithMany()
                        .HasForeignKey("SubTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DEU_Lib.Model.OperationType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operation");

                    b.Navigation("SubType");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("DEU_Lib.Model.Poi", b =>
                {
                    b.HasOne("DEU_Lib.Model.Department", "Department")
                        .WithMany("Pois")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("DEU_Lib.Model.UserOperationResponse", b =>
                {
                    b.HasOne("DEU_Lib.Model.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DEU_Lib.Model.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DEU_Lib.Model.OperationResponse", null)
                        .WithMany("UserResponses")
                        .HasForeignKey("OperationResponseDepartmentId", "OperationResponseOperationId");

                    b.Navigation("Operation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DEU_Lib.Model.Vehicle", b =>
                {
                    b.HasOne("DEU_Lib.Model.Department", "Department")
                        .WithMany("Vehicles")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("DEU_Lib.Model.VehicleStatus", b =>
                {
                    b.HasOne("DEU_Lib.Model.Vehicle", "Vehicle")
                        .WithMany("Statuses")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("DEU_Lib.Model.WaKaWaterSource", b =>
                {
                    b.HasOne("DEU_Lib.Model.Department", "Department")
                        .WithMany("WakaWatersources")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DEU_Lib.Model.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DEU_Lib.Model.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DEU_Lib.Model.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DEU_Lib.Model.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OperationResponseVehicle", b =>
                {
                    b.HasOne("DEU_Lib.Model.Vehicle", null)
                        .WithMany()
                        .HasForeignKey("VehiclesVehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DEU_Lib.Model.OperationResponse", null)
                        .WithMany()
                        .HasForeignKey("OperationResponsesDepartmentId", "OperationResponsesOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DEU_Lib.Model.Alarmplan", b =>
                {
                    b.Navigation("AlarmplanEntries");
                });

            modelBuilder.Entity("DEU_Lib.Model.Checklist", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("DEU_Lib.Model.Department", b =>
                {
                    b.Navigation("Alarmplans");

                    b.Navigation("Checklists");

                    b.Navigation("Contacts");

                    b.Navigation("OperationResponses");

                    b.Navigation("Pois");

                    b.Navigation("Users");

                    b.Navigation("Vehicles");

                    b.Navigation("WakaWatersources");
                });

            modelBuilder.Entity("DEU_Lib.Model.Identity.ApplicationUser", b =>
                {
                    b.Navigation("DepartmentSettings");
                });

            modelBuilder.Entity("DEU_Lib.Model.Operation", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("OperationChecklists");

                    b.Navigation("OperationTypeHistories");

                    b.Navigation("RespondedDepartments");
                });

            modelBuilder.Entity("DEU_Lib.Model.OperationAction", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("DEU_Lib.Model.OperationResponse", b =>
                {
                    b.Navigation("UserResponses");
                });

            modelBuilder.Entity("DEU_Lib.Model.OperationSubType", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("DEU_Lib.Model.OperationType", b =>
                {
                    b.Navigation("Alarmplans");

                    b.Navigation("Checklists");

                    b.Navigation("Operations");
                });

            modelBuilder.Entity("DEU_Lib.Model.Poi", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("DEU_Lib.Model.Vehicle", b =>
                {
                    b.Navigation("Statuses");
                });
#pragma warning restore 612, 618
        }
    }
}
